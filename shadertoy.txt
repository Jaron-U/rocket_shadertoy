/*
This code creates refraction and refraction from a normal map. This is the data: 
iChannel0: Normal Map 
iChannel1: Environment Image (to be reflected)
iChannel2: Ks image
iChannel3: Border Image
*/


const float pi=3.1416;

const int KEY_LEFT  = 37;
const int KEY_UP    = 38;
const int KEY_RIGHT = 39;
const int KEY_DOWN  = 40;




float random (vec2 st) {
    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);
}

float smooth_step( float min, float max, float x )
{
    float t =(x - min) / (max - min);
    t = clamp(t, 0.0, 1.0);
    t = t * t * (3.0 - 2.0 * t); // smoothstep formula   
    return t;
}

float step2( float min, float max, float x )
{
    float t =(x - min) / (max - min);
    t = clamp(t, 0.0, 1.0); 
    return t;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    
    vec2 uv = fragCoord/iResolution.xy; //Normalized pixel coordinates
    
    vec4 col = vec4(0.0);
    vec4 border_color= vec4(0.0,0.0,0.0, 1.0);
    vec4 spec= vec4(1.0,1.0,0.0, 1.0);
    vec4 ambi= vec4(0.10,0.20,0.70, 1.0);
    vec4 img0 = texture(iChannel0, uv);
    vec4 img1=  texture(iChannel1, uv);
    vec4 Ks=texture(iChannel2, uv);

 
    vec3 eye=vec3(0.0,0.0,10.0); 
    eye = eye-vec3(fragCoord,0.0);
    eye = eye/length(eye); 
    
    vec3 normals; 
    vec3 reflect;
    float d=100.0;
    vec3 lightpos = vec3(iMouse.x,iMouse.y,d/2.0);
    vec3 dir = lightpos-vec3(fragCoord,0.0);
    dir=dir/length(dir); 


    
    normals= 2.0*img0.rgb - vec3(1.0); 
    normals = normals/length(normals); 
    reflect = 2.0*dot(dir,normals)*normals-dir;
    float t= 0.5*dot(dir,normals)+0.5;
    float s= 0.5*dot(reflect,eye)+0.5;
    float b=1.0;
    
   
    vec2 reflected_uv= (reflect.xy*d/(reflect.z+0.1)+fragCoord+lightpos.xy)/iResolution.xy;
    vec4 reflected_env= texture(iChannel1, reflected_uv);
   
    
    t=step2(0.1,0.99,t);
    s=step2(0.99,1.0,s);
    vec4 diff=texture(iChannel3,uv);
    ambi = vec4(0.1, 0.2, 0.2, 0.1) * diff;
    
    
    col = ambi*(1.0-t)+diff*t; 
    col= col*(1.0-Ks)+Ks*max(0.8*reflected_env,s*spec) ; 
    
 
    fragColor = vec4(col);    // Output to screen
}